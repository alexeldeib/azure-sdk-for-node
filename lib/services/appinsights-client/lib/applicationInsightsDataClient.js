/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const ServiceClient = msRestAzure.AzureServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Retrieve metric data
 *
 * Gets data for a single metric.
 *
 * @param {string} metricId ID of the metric. This is either a standard AI
 * metric, or an application-specific custom metric. Possible values include:
 * 'requests/count', 'requests/duration', 'requests/failed', 'users/count',
 * 'users/authenticated', 'pageViews/count', 'pageViews/duration',
 * 'client/processingDuration', 'client/receiveDuration',
 * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
 * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',
 * 'exceptions/count', 'exceptions/browser', 'exceptions/server',
 * 'sessions/count', 'performanceCounters/requestExecutionTime',
 * 'performanceCounters/requestsPerSecond',
 * 'performanceCounters/requestsInQueue',
 * 'performanceCounters/memoryAvailableBytes',
 * 'performanceCounters/exceptionsPerSecond',
 * 'performanceCounters/processCpuPercentage',
 * 'performanceCounters/processIOBytesPerSecond',
 * 'performanceCounters/processPrivateBytes',
 * 'performanceCounters/processorCpuPercentage',
 * 'availabilityResults/availabilityPercentage',
 * 'availabilityResults/duration', 'billing/telemetryCount',
 * 'customEvents/count'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {moment.duration} [options.timespan] The timespan over which to
 * retrieve metric values. This is an ISO8601 time period value. If timespan is
 * omitted, a default time range of `PT12H` ("last 12 hours") is used. The
 * actual timespan that is queried may be adjusted by the server based. In all
 * cases, the actual time span used for the query is included in the response.
 *
 * @param {moment.duration} [options.interval] The time interval to use when
 * retrieving metric values. This is an ISO8601 duration. If interval is
 * omitted, the metric value is aggregated across the entire timespan. If
 * interval is supplied, the server may adjust the interval to a more
 * appropriate size based on the timespan used for the query. In all cases, the
 * actual interval used for the query is included in the response.
 *
 * @param {array} [options.aggregation] The aggregation to use when computing
 * the metric values. To retrieve more than one aggregation at a time, separate
 * them with a comma. If no aggregation is specified, then the default
 * aggregation for the metric is used.
 *
 * @param {array} [options.segment] The name of the dimension to segment the
 * metric values by. This dimension must be applicable to the metric you are
 * retrieving. To segment by more than one dimension at a time, separate them
 * with a comma (,). In this case, the metric data will be segmented in the
 * order the dimensions are listed in the parameter.
 *
 * @param {number} [options.top] The number of segments to return.  This value
 * is only valid when segment is specified.
 *
 * @param {string} [options.orderby] The aggregation function and direction to
 * sort the segments by.  This value is only valid when segment is specified.
 *
 * @param {string} [options.filter] An expression used to filter the results.
 * This value should be a valid OData filter expression where the keys of each
 * clause should be applicable dimensions for the metric you are retrieving.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MetricsResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getMetric(metricId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  let interval = (options && options.interval !== undefined) ? options.interval : undefined;
  let aggregation = (options && options.aggregation !== undefined) ? options.aggregation : undefined;
  let segment = (options && options.segment !== undefined) ? options.segment : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (metricId === null || metricId === undefined || typeof metricId.valueOf() !== 'string') {
      throw new Error('metricId cannot be null or undefined and it must be of type string.');
    }
    if(timespan && !moment.isDuration(timespan)) {
      throw new Error('timespan must be of type moment.duration.');
    }
    if(interval && !moment.isDuration(interval)) {
      throw new Error('interval must be of type moment.duration.');
    }
    if (Array.isArray(aggregation)) {
      for (let i = 0; i < aggregation.length; i++) {
        if (aggregation[i] !== null && aggregation[i] !== undefined && typeof aggregation[i].valueOf() !== 'string') {
          throw new Error('aggregation[i] must be of type string.');
        }
      }
    }
    if (aggregation !== null && aggregation !== undefined) {
      if (aggregation.length < 1)
      {
        throw new Error('"aggregation" should satisfy the constraint - "MinItems": 1');
      }
    }
    if (Array.isArray(segment)) {
      for (let i1 = 0; i1 < segment.length; i1++) {
        if (segment[i1] !== null && segment[i1] !== undefined && typeof segment[i1].valueOf() !== 'string') {
          throw new Error('segment[i1] must be of type string.');
        }
      }
    }
    if (segment !== null && segment !== undefined) {
      if (segment.length < 1)
      {
        throw new Error('"segment" should satisfy the constraint - "MinItems": 1');
      }
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (orderby !== null && orderby !== undefined && typeof orderby.valueOf() !== 'string') {
      throw new Error('orderby must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/metrics/{metricId}';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  requestUrl = requestUrl.replace('{metricId}', encodeURIComponent(metricId));
  let queryParameters = [];
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan.toISOString()));
  }
  if (interval !== null && interval !== undefined) {
    queryParameters.push('interval=' + encodeURIComponent(interval.toISOString()));
  }
  if (aggregation !== null && aggregation !== undefined) {
    queryParameters.push('aggregation=' + encodeURIComponent(aggregation.join(',')));
  }
  if (segment !== null && segment !== undefined) {
    queryParameters.push('segment=' + encodeURIComponent(segment.join(',')));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('top=' + encodeURIComponent(top.toString()));
  }
  if (orderby !== null && orderby !== undefined) {
    queryParameters.push('orderby=' + encodeURIComponent(orderby));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('filter=' + encodeURIComponent(filter));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MetricsResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve metric data
 *
 * Gets metric values for multiple metrics
 *
 * @param {array} body The batched metrics query.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {array} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getMetrics(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/metrics';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: true,
        serializedName: 'body',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetricsPostBodySchemaElementType',
              type: {
                name: 'Composite',
                className: 'MetricsPostBodySchema'
              }
          }
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricsResultsItemElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricsResultsItem'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve metric metatadata
 *
 * Gets metadata describing the available metrics
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getMetricsMetadata(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/metrics/metadata';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Execute OData query
 *
 * Executes an OData query for events
 *
 * @param {string} eventType The type of events to query; either a standard
 * event type (`traces`, `customEvents`, `pageViews`, `requests`,
 * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
 * across all event types. Possible values include: '$all', 'traces',
 * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
 * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {moment.duration} [options.timespan] Optional. The timespan over
 * which to retrieve events. This is an ISO8601 time period value.  This
 * timespan is applied in addition to any that are specified in the Odata
 * expression.
 *
 * @param {string} [options.filter] An expression used to filter the returned
 * events
 *
 * @param {string} [options.search] A free-text search expression to match for
 * whether a particular event should be returned
 *
 * @param {string} [options.orderby] A comma-separated list of properties with
 * \"asc\" (the default) or \"desc\" to control the order of returned events
 *
 * @param {string} [options.select] Limits the properties to just those
 * requested on each returned event
 *
 * @param {number} [options.skip] The number of items to skip over before
 * returning events
 *
 * @param {number} [options.top] The number of events to return
 *
 * @param {string} [options.format] Format for the returned events
 *
 * @param {boolean} [options.count] Request a count of matching items included
 * with the returned events
 *
 * @param {string} [options.apply] An expression used for aggregation over
 * returned events
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EventsResults} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEvents(eventType, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let search = (options && options.search !== undefined) ? options.search : undefined;
  let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  let skip = (options && options.skip !== undefined) ? options.skip : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let format = (options && options.format !== undefined) ? options.format : undefined;
  let count = (options && options.count !== undefined) ? options.count : undefined;
  let apply = (options && options.apply !== undefined) ? options.apply : undefined;
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (eventType) {
      let allowedValues = [ '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' ];
      if (!allowedValues.some( function(item) { return item === eventType; })) {
        throw new Error(eventType + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('eventType cannot be null or undefined.');
    }
    if(timespan && !moment.isDuration(timespan)) {
      throw new Error('timespan must be of type moment.duration.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (search !== null && search !== undefined && typeof search.valueOf() !== 'string') {
      throw new Error('search must be of type string.');
    }
    if (orderby !== null && orderby !== undefined && typeof orderby.valueOf() !== 'string') {
      throw new Error('orderby must be of type string.');
    }
    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
      throw new Error('select must be of type string.');
    }
    if (skip !== null && skip !== undefined && typeof skip !== 'number') {
      throw new Error('skip must be of type number.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (format !== null && format !== undefined && typeof format.valueOf() !== 'string') {
      throw new Error('format must be of type string.');
    }
    if (count !== null && count !== undefined && typeof count !== 'boolean') {
      throw new Error('count must be of type boolean.');
    }
    if (apply !== null && apply !== undefined && typeof apply.valueOf() !== 'string') {
      throw new Error('apply must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/events/{eventType}';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  requestUrl = requestUrl.replace('{eventType}', encodeURIComponent(eventType));
  let queryParameters = [];
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan.toISOString()));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (search !== null && search !== undefined) {
    queryParameters.push('$search=' + encodeURIComponent(search));
  }
  if (orderby !== null && orderby !== undefined) {
    queryParameters.push('$orderby=' + encodeURIComponent(orderby));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select));
  }
  if (skip !== null && skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(skip.toString()));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (format !== null && format !== undefined) {
    queryParameters.push('$format=' + encodeURIComponent(format));
  }
  if (count !== null && count !== undefined) {
    queryParameters.push('$count=' + encodeURIComponent(count.toString()));
  }
  if (apply !== null && apply !== undefined) {
    queryParameters.push('$apply=' + encodeURIComponent(apply));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EventsResults']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get an event
 *
 * Gets the data for a single event
 *
 * @param {string} eventType The type of events to query; either a standard
 * event type (`traces`, `customEvents`, `pageViews`, `requests`,
 * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
 * across all event types. Possible values include: '$all', 'traces',
 * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
 * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
 *
 * @param {string} eventId ID of event.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {moment.duration} [options.timespan] Optional. The timespan over
 * which to retrieve events. This is an ISO8601 time period value.  This
 * timespan is applied in addition to any that are specified in the Odata
 * expression.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EventsResults} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEvent(eventType, eventId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (eventType) {
      let allowedValues = [ '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' ];
      if (!allowedValues.some( function(item) { return item === eventType; })) {
        throw new Error(eventType + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('eventType cannot be null or undefined.');
    }
    if(timespan && !moment.isDuration(timespan)) {
      throw new Error('timespan must be of type moment.duration.');
    }
    if (eventId === null || eventId === undefined || typeof eventId.valueOf() !== 'string') {
      throw new Error('eventId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/events/{eventType}/{eventId}';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  requestUrl = requestUrl.replace('{eventType}', encodeURIComponent(eventType));
  requestUrl = requestUrl.replace('{eventId}', encodeURIComponent(eventId));
  let queryParameters = [];
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan.toISOString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EventsResults']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get OData metadata
 *
 * Gets OData EDMX metadata describing the event data model
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEventsMetadataOData(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/events/$metadata';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Execute an Analytics query
 *
 * Executes an Analytics query for data
 *
 * @param {string} query The Analytics query. Learn more about the [Analytics
 * query
 * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {moment.duration} [options.timespan] Optional. The timespan over
 * which to query data. This is an ISO8601 time period value.  This timespan is
 * applied in addition to any that are specified in the query expression.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link QueryResults} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getQuery(query, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (query === null || query === undefined || typeof query.valueOf() !== 'string') {
      throw new Error('query cannot be null or undefined and it must be of type string.');
    }
    if(timespan && !moment.isDuration(timespan)) {
      throw new Error('timespan must be of type moment.duration.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/query';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  queryParameters.push('query=' + encodeURIComponent(query));
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan.toISOString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['QueryResults']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Execute an Analytics query
 *
 * Executes an Analytics query for data.
 * [Here](/documentation/2-Using-the-API/Query) is an example for using POST
 * with an Analytics query.
 *
 * @param {object} body The Analytics query. Learn more about the [Analytics
 * query
 * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
 *
 * @param {string} body.query The query to execute.
 *
 * @param {moment.duration} [body.timespan] Optional. The timespan over which
 * to query data. This is an ISO8601 time period value.  This timespan is
 * applied in addition to any that are specified in the query expression.
 *
 * @param {array} [body.applications] A list of applications that are included
 * in the query.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {moment.duration} [options.timespan] Optional. The timespan over
 * which to query data. This is an ISO8601 time period value.  This timespan is
 * applied in addition to any that are specified in the query expression.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link QueryResults} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _query(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if(timespan && !moment.isDuration(timespan)) {
      throw new Error('timespan must be of type moment.duration.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/query';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan.toISOString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['QueryBody']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['QueryResults']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get Analytics query metadata
 *
 * Gets Analytics query schema describing the data model
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link QueryResults} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getQuerySchema(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.appId === null || this.appId === undefined || typeof this.appId.valueOf() !== 'string') {
      throw new Error('this.appId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/query/schema';
  requestUrl = requestUrl.replace('{appId}', encodeURIComponent(this.appId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['QueryResults']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ApplicationInsightsDataClient. */
class ApplicationInsightsDataClient extends ServiceClient {
  /**
   * Create a ApplicationInsightsDataClient.
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   * @param {string} appId - ID of the application. This is Application ID from the API Access settings blade in the Azure portal.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   */
  constructor(credentials, appId, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (appId === null || appId === undefined) {
      throw new Error('\'appId\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.generateClientRequestId = true;
    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://api.applicationinsights.io/v1';
    }
    this.credentials = credentials;
    this.appId = appId;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
      this.generateClientRequestId = options.generateClientRequestId;
    }
    this.models = models;
    this._getMetric = _getMetric;
    this._getMetrics = _getMetrics;
    this._getMetricsMetadata = _getMetricsMetadata;
    this._getEvents = _getEvents;
    this._getEvent = _getEvent;
    this._getEventsMetadataOData = _getEventsMetadataOData;
    this._getQuery = _getQuery;
    this._query = _query;
    this._getQuerySchema = _getQuerySchema;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Retrieve metric data
   *
   * Gets data for a single metric.
   *
   * @param {string} metricId ID of the metric. This is either a standard AI
   * metric, or an application-specific custom metric. Possible values include:
   * 'requests/count', 'requests/duration', 'requests/failed', 'users/count',
   * 'users/authenticated', 'pageViews/count', 'pageViews/duration',
   * 'client/processingDuration', 'client/receiveDuration',
   * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
   * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',
   * 'exceptions/count', 'exceptions/browser', 'exceptions/server',
   * 'sessions/count', 'performanceCounters/requestExecutionTime',
   * 'performanceCounters/requestsPerSecond',
   * 'performanceCounters/requestsInQueue',
   * 'performanceCounters/memoryAvailableBytes',
   * 'performanceCounters/exceptionsPerSecond',
   * 'performanceCounters/processCpuPercentage',
   * 'performanceCounters/processIOBytesPerSecond',
   * 'performanceCounters/processPrivateBytes',
   * 'performanceCounters/processorCpuPercentage',
   * 'availabilityResults/availabilityPercentage',
   * 'availabilityResults/duration', 'billing/telemetryCount',
   * 'customEvents/count'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] The timespan over which to
   * retrieve metric values. This is an ISO8601 time period value. If timespan is
   * omitted, a default time range of `PT12H` ("last 12 hours") is used. The
   * actual timespan that is queried may be adjusted by the server based. In all
   * cases, the actual time span used for the query is included in the response.
   *
   * @param {moment.duration} [options.interval] The time interval to use when
   * retrieving metric values. This is an ISO8601 duration. If interval is
   * omitted, the metric value is aggregated across the entire timespan. If
   * interval is supplied, the server may adjust the interval to a more
   * appropriate size based on the timespan used for the query. In all cases, the
   * actual interval used for the query is included in the response.
   *
   * @param {array} [options.aggregation] The aggregation to use when computing
   * the metric values. To retrieve more than one aggregation at a time, separate
   * them with a comma. If no aggregation is specified, then the default
   * aggregation for the metric is used.
   *
   * @param {array} [options.segment] The name of the dimension to segment the
   * metric values by. This dimension must be applicable to the metric you are
   * retrieving. To segment by more than one dimension at a time, separate them
   * with a comma (,). In this case, the metric data will be segmented in the
   * order the dimensions are listed in the parameter.
   *
   * @param {number} [options.top] The number of segments to return.  This value
   * is only valid when segment is specified.
   *
   * @param {string} [options.orderby] The aggregation function and direction to
   * sort the segments by.  This value is only valid when segment is specified.
   *
   * @param {string} [options.filter] An expression used to filter the results.
   * This value should be a valid OData filter expression where the keys of each
   * clause should be applicable dimensions for the metric you are retrieving.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MetricsResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getMetricWithHttpOperationResponse(metricId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getMetric(metricId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve metric data
   *
   * Gets data for a single metric.
   *
   * @param {string} metricId ID of the metric. This is either a standard AI
   * metric, or an application-specific custom metric. Possible values include:
   * 'requests/count', 'requests/duration', 'requests/failed', 'users/count',
   * 'users/authenticated', 'pageViews/count', 'pageViews/duration',
   * 'client/processingDuration', 'client/receiveDuration',
   * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
   * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',
   * 'exceptions/count', 'exceptions/browser', 'exceptions/server',
   * 'sessions/count', 'performanceCounters/requestExecutionTime',
   * 'performanceCounters/requestsPerSecond',
   * 'performanceCounters/requestsInQueue',
   * 'performanceCounters/memoryAvailableBytes',
   * 'performanceCounters/exceptionsPerSecond',
   * 'performanceCounters/processCpuPercentage',
   * 'performanceCounters/processIOBytesPerSecond',
   * 'performanceCounters/processPrivateBytes',
   * 'performanceCounters/processorCpuPercentage',
   * 'availabilityResults/availabilityPercentage',
   * 'availabilityResults/duration', 'billing/telemetryCount',
   * 'customEvents/count'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] The timespan over which to
   * retrieve metric values. This is an ISO8601 time period value. If timespan is
   * omitted, a default time range of `PT12H` ("last 12 hours") is used. The
   * actual timespan that is queried may be adjusted by the server based. In all
   * cases, the actual time span used for the query is included in the response.
   *
   * @param {moment.duration} [options.interval] The time interval to use when
   * retrieving metric values. This is an ISO8601 duration. If interval is
   * omitted, the metric value is aggregated across the entire timespan. If
   * interval is supplied, the server may adjust the interval to a more
   * appropriate size based on the timespan used for the query. In all cases, the
   * actual interval used for the query is included in the response.
   *
   * @param {array} [options.aggregation] The aggregation to use when computing
   * the metric values. To retrieve more than one aggregation at a time, separate
   * them with a comma. If no aggregation is specified, then the default
   * aggregation for the metric is used.
   *
   * @param {array} [options.segment] The name of the dimension to segment the
   * metric values by. This dimension must be applicable to the metric you are
   * retrieving. To segment by more than one dimension at a time, separate them
   * with a comma (,). In this case, the metric data will be segmented in the
   * order the dimensions are listed in the parameter.
   *
   * @param {number} [options.top] The number of segments to return.  This value
   * is only valid when segment is specified.
   *
   * @param {string} [options.orderby] The aggregation function and direction to
   * sort the segments by.  This value is only valid when segment is specified.
   *
   * @param {string} [options.filter] An expression used to filter the results.
   * This value should be a valid OData filter expression where the keys of each
   * clause should be applicable dimensions for the metric you are retrieving.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MetricsResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MetricsResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getMetric(metricId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getMetric(metricId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getMetric(metricId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve metric data
   *
   * Gets metric values for multiple metrics
   *
   * @param {array} body The batched metrics query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getMetricsWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getMetrics(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve metric data
   *
   * Gets metric values for multiple metrics
   *
   * @param {array} body The batched metrics query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getMetrics(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getMetrics(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getMetrics(body, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve metric metatadata
   *
   * Gets metadata describing the available metrics
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getMetricsMetadataWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getMetricsMetadata(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve metric metatadata
   *
   * Gets metadata describing the available metrics
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getMetricsMetadata(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getMetricsMetadata(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getMetricsMetadata(options, optionalCallback);
    }
  }

  /**
   * @summary Execute OData query
   *
   * Executes an OData query for events
   *
   * @param {string} eventType The type of events to query; either a standard
   * event type (`traces`, `customEvents`, `pageViews`, `requests`,
   * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
   * across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to retrieve events. This is an ISO8601 time period value.  This
   * timespan is applied in addition to any that are specified in the Odata
   * expression.
   *
   * @param {string} [options.filter] An expression used to filter the returned
   * events
   *
   * @param {string} [options.search] A free-text search expression to match for
   * whether a particular event should be returned
   *
   * @param {string} [options.orderby] A comma-separated list of properties with
   * \"asc\" (the default) or \"desc\" to control the order of returned events
   *
   * @param {string} [options.select] Limits the properties to just those
   * requested on each returned event
   *
   * @param {number} [options.skip] The number of items to skip over before
   * returning events
   *
   * @param {number} [options.top] The number of events to return
   *
   * @param {string} [options.format] Format for the returned events
   *
   * @param {boolean} [options.count] Request a count of matching items included
   * with the returned events
   *
   * @param {string} [options.apply] An expression used for aggregation over
   * returned events
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventsResults>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEventsWithHttpOperationResponse(eventType, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEvents(eventType, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Execute OData query
   *
   * Executes an OData query for events
   *
   * @param {string} eventType The type of events to query; either a standard
   * event type (`traces`, `customEvents`, `pageViews`, `requests`,
   * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
   * across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to retrieve events. This is an ISO8601 time period value.  This
   * timespan is applied in addition to any that are specified in the Odata
   * expression.
   *
   * @param {string} [options.filter] An expression used to filter the returned
   * events
   *
   * @param {string} [options.search] A free-text search expression to match for
   * whether a particular event should be returned
   *
   * @param {string} [options.orderby] A comma-separated list of properties with
   * \"asc\" (the default) or \"desc\" to control the order of returned events
   *
   * @param {string} [options.select] Limits the properties to just those
   * requested on each returned event
   *
   * @param {number} [options.skip] The number of items to skip over before
   * returning events
   *
   * @param {number} [options.top] The number of events to return
   *
   * @param {string} [options.format] Format for the returned events
   *
   * @param {boolean} [options.count] Request a count of matching items included
   * with the returned events
   *
   * @param {string} [options.apply] An expression used for aggregation over
   * returned events
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EventsResults} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventsResults} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEvents(eventType, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEvents(eventType, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEvents(eventType, options, optionalCallback);
    }
  }

  /**
   * @summary Get an event
   *
   * Gets the data for a single event
   *
   * @param {string} eventType The type of events to query; either a standard
   * event type (`traces`, `customEvents`, `pageViews`, `requests`,
   * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
   * across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {string} eventId ID of event.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to retrieve events. This is an ISO8601 time period value.  This
   * timespan is applied in addition to any that are specified in the Odata
   * expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventsResults>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEventWithHttpOperationResponse(eventType, eventId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEvent(eventType, eventId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get an event
   *
   * Gets the data for a single event
   *
   * @param {string} eventType The type of events to query; either a standard
   * event type (`traces`, `customEvents`, `pageViews`, `requests`,
   * `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query
   * across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies',
   * 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics'
   *
   * @param {string} eventId ID of event.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to retrieve events. This is an ISO8601 time period value.  This
   * timespan is applied in addition to any that are specified in the Odata
   * expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EventsResults} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventsResults} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEvent(eventType, eventId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEvent(eventType, eventId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEvent(eventType, eventId, options, optionalCallback);
    }
  }

  /**
   * @summary Get OData metadata
   *
   * Gets OData EDMX metadata describing the event data model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEventsMetadataODataWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEventsMetadataOData(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get OData metadata
   *
   * Gets OData EDMX metadata describing the event data model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEventsMetadataOData(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEventsMetadataOData(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEventsMetadataOData(options, optionalCallback);
    }
  }

  /**
   * @summary Execute an Analytics query
   *
   * Executes an Analytics query for data
   *
   * @param {string} query The Analytics query. Learn more about the [Analytics
   * query
   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueryResults>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getQueryWithHttpOperationResponse(query, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getQuery(query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Execute an Analytics query
   *
   * Executes an Analytics query for data
   *
   * @param {string} query The Analytics query. Learn more about the [Analytics
   * query
   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {QueryResults} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueryResults} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getQuery(query, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getQuery(query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getQuery(query, options, optionalCallback);
    }
  }

  /**
   * @summary Execute an Analytics query
   *
   * Executes an Analytics query for data.
   * [Here](/documentation/2-Using-the-API/Query) is an example for using POST
   * with an Analytics query.
   *
   * @param {object} body The Analytics query. Learn more about the [Analytics
   * query
   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   *
   * @param {string} body.query The query to execute.
   *
   * @param {moment.duration} [body.timespan] Optional. The timespan over which
   * to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {array} [body.applications] A list of applications that are included
   * in the query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueryResults>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._query(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Execute an Analytics query
   *
   * Executes an Analytics query for data.
   * [Here](/documentation/2-Using-the-API/Query) is an example for using POST
   * with an Analytics query.
   *
   * @param {object} body The Analytics query. Learn more about the [Analytics
   * query
   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   *
   * @param {string} body.query The query to execute.
   *
   * @param {moment.duration} [body.timespan] Optional. The timespan over which
   * to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {array} [body.applications] A list of applications that are included
   * in the query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {moment.duration} [options.timespan] Optional. The timespan over
   * which to query data. This is an ISO8601 time period value.  This timespan is
   * applied in addition to any that are specified in the query expression.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {QueryResults} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueryResults} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  query(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._query(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._query(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get Analytics query metadata
   *
   * Gets Analytics query schema describing the data model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueryResults>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getQuerySchemaWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getQuerySchema(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get Analytics query metadata
   *
   * Gets Analytics query schema describing the data model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {QueryResults} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueryResults} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getQuerySchema(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getQuerySchema(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getQuerySchema(options, optionalCallback);
    }
  }

}

module.exports = ApplicationInsightsDataClient;
module.exports['default'] = ApplicationInsightsDataClient;
module.exports.ApplicationInsightsDataClient = ApplicationInsightsDataClient;
module.exports.ApplicationInsightsDataModels = models;
